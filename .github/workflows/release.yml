name: Build Rust Binaries

on:
  push:
    branches: [ master ] # Trigger on pushes to the master branch
  workflow_dispatch:   # Optional: Allow manual triggering

jobs:
  build-targets:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Keep running other builds even if one fails
      matrix:
        include:
          # Linux GNU Targets (using Ubuntu runner + cross)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            use-cross: true
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true

          # Android Targets (using Ubuntu runner + cross)
          # Note: Android builds via cross might require specific NDK setup or dependencies
          # defined in Cross.toml if your crate has C dependencies.
          - target: aarch64-linux-android
            os: ubuntu-latest
            use-cross: true
          - target: armv7-linux-androideabi
            os: ubuntu-latest
            use-cross: true
          - target: i686-linux-android
            os: ubuntu-latest
            use-cross: true
          - target: x86_64-linux-android
            os: ubuntu-latest
            use-cross: true

          # Windows MSVC Target (using Windows runner, native build)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            use-cross: false # No cross needed, build natively

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }} # Install the specific target via rustup

    # --- Build steps ---

    # Build using 'cross' for Linux/Android targets on Ubuntu runner
    - name: Install cross-rs
      if: matrix.use-cross == true
      run: cargo install cross --git https://github.com/cross-rs/cross --tag master # Or use a specific release tag

    - name: Build with cross
      if: matrix.use-cross == true
      run: cross build --release --target ${{ matrix.target }} --verbose

    # Build natively for Windows target on Windows runner
    - name: Build natively (Windows)
      if: matrix.use-cross == false && matrix.os == 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }} --verbose
      shell: bash # Use bash for consistency if needed, or default powershell

    # --- Package and Upload Artifacts ---

    # Package Linux/Android binaries
    - name: Package artifact (Linux/Android)
      if: matrix.use-cross == true
      shell: bash
      run: |
        CRATE_NAME=apkeep
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.target }}" == *"-android"* ]]; then
          # Android might produce shared objects (.so) if it's a cdylib, adjust if needed
          # Assuming a standard binary for now
          echo "Packaging $CRATE_NAME for ${{ matrix.target }}"
        fi
        tar czvf ../../../${CRATE_NAME}-${{ matrix.target }}.tar.gz $CRATE_NAME
        cd ../../../

    # Package Windows binary
    - name: Package artifact (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh # Use PowerShell for Compress-Archive
      run: |
        $CRATE_NAME="apkeep"
        $TARGET_DIR="target/${{ matrix.target }}/release"
        Compress-Archive -Path "$TARGET_DIR/$($CRATE_NAME).exe" -DestinationPath "$($CRATE_NAME)-${{ matrix.target }}.zip"

    # Upload all artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.target }}
        # Define path based on OS and packaging method
        path: |
          apkeep-${{ matrix.target }}.tar.gz
          apkeep-${{ matrix.target }}.zip
